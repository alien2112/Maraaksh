const { MongoClient } = require('mongodb');

// Your MongoDB Atlas connection string
const MONGODB_URI = 'mongodb+srv://eslamabdaltif:oneone2@cluster0marakshv2.ltf0bnd.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0marakshv2';

async function addFoodItemsFromOldWebsite() {
  let client;
  
  try {
    console.log('üåê Connecting to MongoDB Atlas...');
    console.log('Connection string:', MONGODB_URI.replace(/\/\/.*@/, '//***:***@')); // Hide credentials
    
    client = new MongoClient(MONGODB_URI);
    await client.connect();
    
    const db = client.db();
    console.log('‚úÖ Connected to Atlas database:', db.databaseName);
    
    const categoriesCollection = db.collection('categories');
    const menuItemsCollection = db.collection('menuitems');
    
    // Get existing categories
    const categories = await categoriesCollection.find({}).toArray();
    const categoryMap = {};
    categories.forEach(cat => {
      categoryMap[cat.name] = cat._id;
    });
    
    console.log('\nüìã Available categories:');
    categories.forEach(cat => {
      console.log(`   - ${cat.name} (${cat.nameEn})`);
    });
    
    // Food items from the old website
    const foodItems = [
      // Moroccan Food (ŸÖÿ£ŸÉŸàŸÑÿßÿ™ ŸÖÿ∫ÿ±ÿ®Ÿäÿ©)
      { name: 'ÿ¥ŸÉÿ¥ŸàŸÉÿ©', description: 'ÿ¥ŸÉÿ¥ŸàŸÉŸá', categoryId: categoryMap['ÿßŸÑŸÖÿ£ŸÉŸàŸÑÿßÿ™ ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿäÿ©'], price: 14, calories: 149, order: 1, status: 'active', createdAt: new Date(), updatedAt: new Date() },
      { name: 'ÿ®Ÿäÿ∂ ÿßŸàŸÖŸÑŸäÿ™', description: 'ÿ®Ÿäÿ∂ ÿßŸàŸÖŸÑŸäÿ™', categoryId: categoryMap['ÿßŸÑŸÖÿ£ŸÉŸàŸÑÿßÿ™ ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿäÿ©'], price: 10, calories: 120, order: 2, status: 'active', createdAt: new Date(), updatedAt: new Date() },
      { name: 'ŸÉÿ®ÿØŸá', description: 'ŸÉÿ®ÿØŸá ÿ®ÿßŸÑÿ∑ÿ±ŸäŸÇŸá ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿäÿ©', categoryId: categoryMap['ÿßŸÑŸÖÿ£ŸÉŸàŸÑÿßÿ™ ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿäÿ©'], price: 14, calories: 107, order: 3, status: 'active', createdAt: new Date(), updatedAt: new Date() },
      { name: 'ŸÅŸàŸÑ', description: 'ŸÅŸàŸÑ ŸÖÿØŸÖÿ≥', categoryId: categoryMap['ÿßŸÑŸÖÿ£ŸÉŸàŸÑÿßÿ™ ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿäÿ©'], price: 10, calories: 180, order: 4, status: 'active', createdAt: new Date(), updatedAt: new Date() },
      { name: 'ÿµŸäŸÜŸäÿ© ŸÖÿ¥ŸÉŸÑŸá', description: 'ÿµŸäŸÜŸäÿ© ŸÖÿ¥ŸÉŸÑŸá ŸÖŸÜ ÿßŸÑÿßŸÉŸÑÿßÿ™ ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿäÿ©', categoryId: categoryMap['ÿßŸÑŸÖÿ£ŸÉŸàŸÑÿßÿ™ ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿäÿ©'], price: 25, calories: 300, order: 5, status: 'active', featured: true, createdAt: new Date(), updatedAt: new Date() },
      { name: 'ÿ≠ÿ±Ÿäÿ±Ÿá ŸÖŸÅÿ±ÿ®Ÿäÿ©', description: 'ÿ¥Ÿàÿ±ÿ®ÿ© ÿ≠ÿ±Ÿäÿ±Ÿá ŸÖÿ∫ÿ±ÿ®ŸäŸá', categoryId: categoryMap['ÿßŸÑŸÖÿ£ŸÉŸàŸÑÿßÿ™ ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿäÿ©'], price: 5, order: 6, status: 'active', createdAt: new Date(), updatedAt: new Date() },
      { name: 'ÿ®Ÿäÿµÿßÿ±Ÿá ŸÖÿ∫ÿ±ÿ®Ÿäÿ©', description: 'ÿ®Ÿäÿµÿßÿ±Ÿá ŸÖÿ∫ÿ±ÿ®Ÿäÿ©', categoryId: categoryMap['ÿßŸÑŸÖÿ£ŸÉŸàŸÑÿßÿ™ ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿäÿ©'], price: 5, calories: 75, order: 7, status: 'active', createdAt: new Date(), updatedAt: new Date() },
      { name: 'ŸÖÿ≥ŸÖŸÜ ŸÖÿ∫ÿ±ÿ®Ÿä', description: 'ŸÖÿ≥ŸÖŸÜ ŸÖÿ∫ÿ±ÿ®Ÿä ÿ®ÿßŸÑÿ≠ÿ®ÿ©', categoryId: categoryMap['ÿßŸÑŸÖÿ£ŸÉŸàŸÑÿßÿ™ ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿäÿ©'], price: 4, calories: 95, order: 8, status: 'active', createdAt: new Date(), updatedAt: new Date() },
      { name: 'ÿ≠ÿ±ÿ¥Ÿá ŸÖÿ∫ÿ±ÿ®Ÿäÿ©', description: 'ÿ≠ÿ±ÿ¥Ÿá ŸÖÿ∫ÿ±ÿ®Ÿäÿ©', categoryId: categoryMap['ÿßŸÑŸÖÿ£ŸÉŸàŸÑÿßÿ™ ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿäÿ©'], price: 4, calories: 115, order: 9, status: 'active', createdAt: new Date(), updatedAt: new Date() },
      { name: 'ÿ∑ÿßŸÇŸàÿ≥ ŸÖÿ∫ÿ±ÿ®Ÿä', description: 'ÿ∑ÿßŸÇŸàÿ≥ ŸÖÿ∫ÿ±ÿ®Ÿä ÿ®ÿßŸàÿµÿßŸÑ ÿßŸÑÿØÿ¨ÿßÿ¨ - ŸÑÿ≠ŸÖ', categoryId: categoryMap['ÿßŸÑŸÖÿ£ŸÉŸàŸÑÿßÿ™ ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿäÿ©'], price: 20, calories: 230, order: 10, status: 'active', createdAt: new Date(), updatedAt: new Date() },
      { name: 'ÿ®ŸàŸÉÿßÿØŸäŸàÿ≥', description: 'ÿ®ŸàŸÉÿßÿØŸäŸàÿ≥ ( ÿ™ŸàŸÜŸá - ÿ≥ŸÑÿ∑Ÿá - ÿÆÿ®ÿ≤ - ÿ≤Ÿäÿ™ŸàŸÜ )', categoryId: categoryMap['ÿßŸÑŸÖÿ£ŸÉŸàŸÑÿßÿ™ ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿäÿ©'], price: 15, calories: 70, order: 11, status: 'active', createdAt: new Date(), updatedAt: new Date() },
      { name: 'ÿ®ÿ∑ÿ®Ÿàÿ∑ ÿ¨ÿ®ŸÜ', description: 'ÿ≠ÿ®ÿ© ŸÅÿ∑Ÿäÿ± ŸÖÿ∫ÿ±ÿ®Ÿä ÿ®ÿßŸÑÿ¨ÿ®ŸÜ ÿßŸÑŸÖŸàÿØÿ≤ÿ±ŸäŸÑÿß', categoryId: categoryMap['ÿßŸÑŸÖÿ£ŸÉŸàŸÑÿßÿ™ ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿäÿ©'], price: 15, calories: 70, order: 12, status: 'active', createdAt: new Date(), updatedAt: new Date() },
      { name: 'ÿ®ÿ∑ÿ®Ÿàÿ∑ ŸÑÿ≠ŸÖ', description: 'ÿ≠ÿ®ÿ© ŸÅÿ∑Ÿäÿ± ŸÖÿ∫ÿ±ÿ®Ÿä ÿ®ÿßŸÑŸÑÿ≠ŸÖ ( ÿ®ÿ∑ÿ®Ÿàÿ®ÿ∑ )', categoryId: categoryMap['ÿßŸÑŸÖÿ£ŸÉŸàŸÑÿßÿ™ ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿäÿ©'], price: 15, calories: 130, order: 13, status: 'active', createdAt: new Date(), updatedAt: new Date() },
      { name: 'ÿ®ÿ∑ÿ®Ÿàÿ∑ ÿÆÿ∂ÿßÿ±', description: 'ŸÅÿ∑Ÿäÿ± ŸÖÿ∫ÿ±ÿ®Ÿä ÿ®ÿßŸÑÿÆÿ∂ÿßÿ±', categoryId: categoryMap['ÿßŸÑŸÖÿ£ŸÉŸàŸÑÿßÿ™ ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿäÿ©'], price: 15, calories: 90, order: 14, status: 'active', createdAt: new Date(), updatedAt: new Date() },
      { name: 'ÿ≥ŸÑÿ∑ÿ© ŸÖÿ∫ÿ±ÿ®Ÿäÿ©', description: 'ÿ≥ŸÑÿ∑ÿ© ÿÆÿ∂ÿßÿ± ŸÖÿ∫ÿ±ÿ®Ÿäÿ©', categoryId: categoryMap['ÿßŸÑŸÖÿ£ŸÉŸàŸÑÿßÿ™ ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿäÿ©'], price: 10, calories: 25, order: 15, status: 'active', createdAt: new Date(), updatedAt: new Date() },
      { name: 'ÿ¨ÿ±ÿßÿ™ÿßŸÜ', description: 'ÿ®ÿ¥ÿßŸÖŸäŸÑ - ŸÑÿ≠ŸÖ - ÿ®ÿ∑ÿßÿ∑ÿ≥ - ŸÖÿπŸÉÿ±ŸàŸÜŸá', categoryId: categoryMap['ÿßŸÑŸÖÿ£ŸÉŸàŸÑÿßÿ™ ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿäÿ©'], price: 25, calories: 290, order: 16, status: 'active', createdAt: new Date(), updatedAt: new Date() },

      // Pizza (ÿßŸÑÿ®Ÿäÿ™ÿ≤ÿß)
      { name: 'ÿ®Ÿäÿ™ÿ≤ÿß ÿÆÿ∂ÿßÿ±', description: 'ÿ®Ÿäÿ™ÿ≤ÿß ÿ®ÿßŸÑÿÆÿ∂ÿßÿ± ÿßŸÑÿ∑ÿßÿ≤ÿ¨ÿ© ŸàÿßŸÑÿ¨ÿ®ŸÜ', categoryId: categoryMap['ÿßŸÑÿ®Ÿäÿ™ÿ≤ÿß'], price: 12, calories: 250, order: 1, status: 'active', createdAt: new Date(), updatedAt: new Date() },
      { name: 'ÿ®Ÿäÿ™ÿ≤ÿß ÿØÿ¨ÿßÿ¨', description: 'ÿ®Ÿäÿ™ÿ≤ÿß ÿ®ŸÇÿ∑ÿπ ÿßŸÑÿØÿ¨ÿßÿ¨ ÿßŸÑŸÖÿ¥ŸàŸä ŸàÿßŸÑÿÆÿ∂ÿßÿ±', categoryId: categoryMap['ÿßŸÑÿ®Ÿäÿ™ÿ≤ÿß'], price: 14, calories: 320, order: 2, status: 'active', featured: true, createdAt: new Date(), updatedAt: new Date() },
      { name: 'ÿ®Ÿäÿ™ÿ≤ÿß ŸÖÿ¥ŸÉŸÑ', description: 'ÿ®Ÿäÿ™ÿ≤ÿß ÿ®ÿÆŸÑŸäÿ∑ ŸÖŸÜ ÿßŸÑŸÑÿ≠ŸàŸÖ ŸàÿßŸÑÿÆÿ∂ÿßÿ±', categoryId: categoryMap['ÿßŸÑÿ®Ÿäÿ™ÿ≤ÿß'], price: 15, calories: 350, order: 3, status: 'active', createdAt: new Date(), updatedAt: new Date() },

      // Desserts (ÿßŸÑÿ≠ŸÑÿß)
      { name: 'ÿ™ÿ¥Ÿäÿ≤ ŸÉŸäŸÉ ÿ™Ÿàÿ™ ÿßÿ≤ÿ±ŸÇ', description: 'ÿ™ÿ¥Ÿäÿ≤ ŸÉŸäŸÉ ÿ™Ÿàÿ™ ÿßÿ≤ÿ±ŸÇ', categoryId: categoryMap['ÿßŸÑÿ≠ŸÑÿß'], price: 22, calories: 19, order: 1, status: 'active', createdAt: new Date(), updatedAt: new Date() },
      { name: 'ÿ™ÿ¥Ÿäÿ≤ ŸÉŸäŸÉ ŸÅÿ±ÿßŸàŸÑŸá', description: 'ÿ™ÿ¥Ÿäÿ≤ ŸÉŸäŸÉ ŸÅÿ±ÿßŸàŸÑŸá', categoryId: categoryMap['ÿßŸÑÿ≠ŸÑÿß'], price: 22, calories: 80, order: 2, status: 'active', createdAt: new Date(), updatedAt: new Date() },
      { name: 'ŸÉŸäŸÉ ÿ≥ŸÜŸäŸÉÿ±ÿ≥', description: 'ŸÉŸäŸÉ ÿ≥ŸÜŸäŸÉÿ±ÿ≥', categoryId: categoryMap['ÿßŸÑÿ≠ŸÑÿß'], price: 22, calories: 120, order: 3, status: 'active', createdAt: new Date(), updatedAt: new Date() },
      { name: 'ŸÉŸäŸÉ ÿ™ÿ±ÿßŸÖÿ≥ŸäŸà', description: 'ŸÉŸäŸÉ ÿ™ÿ±ÿßŸÖÿ≥ŸäŸà', categoryId: categoryMap['ÿßŸÑÿ≠ŸÑÿß'], price: 22, calories: 86, order: 4, status: 'active', createdAt: new Date(), updatedAt: new Date() },
      { name: 'ÿ™ÿ¥Ÿäÿ≤ ŸÉŸäŸÉ ŸÑŸàÿ™ÿ≥', description: 'ÿ¥Ÿäÿ≥ ŸÉŸäŸÉ ŸÑŸàÿ™ÿ≥', categoryId: categoryMap['ÿßŸÑÿ≠ŸÑÿß'], price: 22, calories: 110, order: 5, status: 'active', createdAt: new Date(), updatedAt: new Date() },
      { name: 'ÿ®ŸàÿØŸäŸÜÿ¨', description: 'ÿ®ŸàÿØŸäŸÜÿ¨ ŸÖÿ™ŸÜŸàÿπ', categoryId: categoryMap['ÿßŸÑÿ≠ŸÑÿß'], price: 15, calories: 75, order: 6, status: 'active', createdAt: new Date(), updatedAt: new Date() },
      { name: 'ŸÉŸàŸÉŸäÿ≤', description: 'ŸÉŸàŸÉŸäÿ≤ ŸÖÿ≠ÿ∂ÿ± ÿ∑ÿßÿ≤ÿ¨ ÿ®ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ©', categoryId: categoryMap['ÿßŸÑÿ≠ŸÑÿß'], price: 12, calories: 150, order: 7, status: 'active', createdAt: new Date(), updatedAt: new Date() },
      { name: 'ŸÉŸäŸÉ ÿπÿ≥ŸÑ', description: 'ŸÉŸäŸÉ ÿßŸÑÿπÿ≥ŸÑ ÿßŸÑÿ∑ÿ®ŸäÿπŸä ÿßŸÑÿ¥ŸáŸä', categoryId: categoryMap['ÿßŸÑÿ≠ŸÑÿß'], price: 22, calories: 320, order: 8, status: 'active', createdAt: new Date(), updatedAt: new Date() },
      { name: 'ÿ≥ÿßŸÜ ÿ≥ÿ®Ÿäÿ≥ÿ™ŸäÿßŸÜ', description: 'ŸÉŸäŸÉ ÿ≥ÿßŸÜ ÿ≥ÿ®Ÿäÿ≥ÿ™ŸäÿßŸÜ ÿßŸÑÿ•ÿ≥ÿ®ÿßŸÜŸä', categoryId: categoryMap['ÿßŸÑÿ≠ŸÑÿß'], price: 22, calories: 380, order: 9, status: 'active', createdAt: new Date(), updatedAt: new Date() },
      { name: 'ŸÉŸäŸÉ ŸÜŸàÿ™ŸäŸÑÿß', description: 'ŸÉŸäŸÉ ÿßŸÑŸÜŸàÿ™ŸäŸÑÿß ÿßŸÑŸÉÿ±ŸäŸÖŸä ÿßŸÑÿ¥ŸáŸäÿ±', categoryId: categoryMap['ÿßŸÑÿ≠ŸÑÿß'], price: 22, calories: 420, order: 10, status: 'active', featured: true, createdAt: new Date(), updatedAt: new Date() },
      { name: 'ŸÉÿ±ÿßŸÜÿ¥Ÿä ŸÉŸäŸÉ', description: 'ŸÉŸäŸÉ ŸÖŸÇÿ±ŸÖÿ¥ ÿ®ÿ∑ÿ®ŸÇÿßÿ™ ÿßŸÑÿ¥ŸàŸÉŸàŸÑÿßÿ™ÿ©', categoryId: categoryMap['ÿßŸÑÿ≠ŸÑÿß'], price: 22, calories: 450, order: 11, status: 'active', createdAt: new Date(), updatedAt: new Date() }
    ];
    
    // Filter out items for categories that don't exist
    const validItems = foodItems.filter(item => item.categoryId);
    const invalidItems = foodItems.filter(item => !item.categoryId);
    
    if (invalidItems.length > 0) {
      console.log('\n‚ö†Ô∏è  Some items could not be added (category not found):');
      invalidItems.forEach(item => {
        console.log(`   - ${item.name} (category not found)`);
      });
    }
    
    console.log(`\nüçΩÔ∏è  Adding ${validItems.length} food items...`);
    
    // Insert food items
    const result = await menuItemsCollection.insertMany(validItems);
    console.log(`   Created ${result.insertedCount} food items`);
    
    // Verify the data
    console.log('\n‚úÖ Verification:');
    const totalCategories = await categoriesCollection.countDocuments();
    const totalMenuItems = await menuItemsCollection.countDocuments();
    console.log(`   Total Categories: ${totalCategories}`);
    console.log(`   Total Menu Items: ${totalMenuItems}`);
    
    // Show items by category
    console.log('\nüìä Items by Category:');
    for (const category of categories) {
      const itemCount = await menuItemsCollection.countDocuments({ categoryId: category._id });
      console.log(`   ${category.name}: ${itemCount} items`);
    }
    
    console.log('\nüéâ Food items from old website added successfully!');
    
  } catch (error) {
    console.error('‚ùå Error adding food items:', error);
    throw error;
  } finally {
    if (client) {
      await client.close();
      console.log('\nüîå Disconnected from MongoDB Atlas');
    }
  }
}

// Run the script
addFoodItemsFromOldWebsite().catch(console.error);

